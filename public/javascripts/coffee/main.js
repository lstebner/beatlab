// Generated by CoffeeScript 1.9.3
(function() {
  var EventTracker, Events,
    slice = [].slice,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  World.Widget = (function() {
    Widget.init = function(id, opts) {
      if (opts == null) {
        opts = {};
      }
      this._instances || (this._instances = []);
      return this._instances.push(new this(id, opts));
    };

    function Widget(container, opts1) {
      this.opts = opts1 != null ? opts1 : {};
      this.container = $(container);
      this.key_bindings = [];
      this.global_key_bindings = [];
      this.setup();
    }

    Widget.prototype.trigger = function() {
      var args, evnt, ref;
      evnt = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      return (ref = this.container).trigger.apply(ref, [evnt].concat(slice.call(args)));
    };

    Widget.prototype.on = function(evnt, fn) {
      if (!this.container.length) {
        return console.error("event attached to widget with no container");
      }
      return this.container.on(evnt, fn);
    };

    Widget.prototype.before_setup = function() {
      return 1;
    };

    Widget.prototype.ready = function() {
      return 1;
    };

    Widget.prototype.setup_events = function() {
      return 1;
    };

    Widget.prototype.dispatch = function(evnt, map) {
      return this.on(evnt, (function(_this) {
        return function(e) {
          var $el, fn, key, prevent, results;
          $el = $(e.target);
          results = [];
          for (key in map) {
            fn = map[key];
            if ($el.is(key) || $el.hasClass("" + key)) {
              prevent = fn.apply(_this, [$el, e]);
              if (prevent) {
                results.push(e.preventDefault());
              } else {
                results.push(void 0);
              }
            } else {
              results.push(void 0);
            }
          }
          return results;
        };
      })(this));
    };

    Widget.prototype.setup = function() {
      this.should_render = false;
      this.before_setup();
      this.setup_events();
      this.setup_key_handlers();
      this.ready();
      return this.render();
    };

    Widget.prototype.bind_key = function(key, fn, global) {
      if (global == null) {
        global = false;
      }
      if (!_.isArray(key)) {
        key = [key];
      }
      if (global) {
        return this.global_key_bindings.push([key, fn]);
      } else {
        return this.key_bindings.push([key, fn]);
      }
    };

    Widget.prototype.setup_key_handlers = function() {
      var fire_key_event;
      fire_key_event = (function(_this) {
        return function(keycode, bindings, e) {
          var binding, i, len;
          for (i = 0, len = bindings.length; i < len; i++) {
            binding = bindings[i];
            if (_.indexOf(binding[0], keycode) > -1) {
              return binding[1].call(_this, e);
            }
          }
          return false;
        };
      })(this);
      if (!_.isEmpty(this.key_bindings)) {
        this.container.on("keydown", (function(_this) {
          return function(e) {
            var prevent;
            prevent = fire_key_event(e.keyCode, _this.key_bindings, e);
            console.log("prevent", prevent);
            if (prevent) {
              return e.preventDefault();
            }
          };
        })(this));
      }
      if (!_.isEmpty(this.global_key_bindings)) {
        return $(document.body).on("keydown", (function(_this) {
          return function(e) {
            var prevent;
            prevent = fire_key_event(e.keyCode, _this.global_key_bindings, e);
            if (prevent) {
              return e.preventDefault();
            }
          };
        })(this));
      }
    };

    Widget.prototype.render = function() {
      if (!this.should_render) {
        return;
      }
      this.should_render = false;
      return true;
    };

    return Widget;

  })();

  Events = {};

  EventTracker = (function() {
    function EventTracker(debug) {
      var _gaq;
      this.debug = debug != null ? debug : false;
      if (typeof _gaq === "undefined" || _gaq === null) {
        _gaq = [];
      }
      this.setup_events();
    }

    EventTracker.prototype.setup_events = function() {
      return $('body').on('click', '[data-track-click-event]', (function(_this) {
        return function(e) {
          return _this.event($(_this).data('track-click-event'));
        };
      })(this));
    };

    EventTracker.prototype.track_event = function(cat, action, value, other) {
      var i, len, track, val;
      track = ['_trackEvent'];
      if (_.isArray(cat)) {
        for (i = 0, len = cat.length; i < len; i++) {
          val = cat[i];
          track.push(val);
        }
      } else {
        if (cat) {
          track.push(cat);
        }
        if (action) {
          track.push(action);
        }
        if (value) {
          track.push(value);
        }
        if (other) {
          track.push(other);
        }
      }
      _gaq.push(track);
      if (this.debug) {
        return console.log(track);
      }
    };

    EventTracker.prototype.event = function(key) {
      if (!_.has(Events, key)) {
        return;
      }
      return this.track_event(Events[key]);
    };

    return EventTracker;

  })();

  $(function() {
    return World.event_tracker = new EventTracker(1);
  });

  World.Home = (function(superClass) {
    extend(Home, superClass);

    function Home() {
      return Home.__super__.constructor.apply(this, arguments);
    }

    Home.prototype.before_setup = function() {};

    Home.prototype.setup_events = function() {
      return this.dispatch("click", {});
    };

    return Home;

  })(World.Widget);

}).call(this);
